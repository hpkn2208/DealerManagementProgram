
SimulateTX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800300  00800300  00000600  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3c  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079b  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f4  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000027bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_1>
   8:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  9e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <encrypt>:

Key_type encrypt(uint16_t count_temp){// count is the counter to sync
	Key_type key;
	key.count1=(count_temp&0xff00)>>8;
	key.count2= count_temp&0x00ff    ;
	key.y_box1=a[key.count1];			//Transmitter
  a6:	e9 2f       	mov	r30, r25
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	e0 50       	subi	r30, 0x00	; 0
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	a0 81       	ld	r26, Z
	key.y_box1=a[key.y_box1];
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	a0 50       	subi	r26, 0x00	; 0
  b4:	be 4f       	sbci	r27, 0xFE	; 254
	key.y_box2=b[key.count2];			//Transmitter
  b6:	e8 2f       	mov	r30, r24
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	e0 50       	subi	r30, 0x00	; 0
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	e0 81       	ld	r30, Z
	key.y_box2=b[key.y_box2];
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	e0 50       	subi	r30, 0x00	; 0
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
	return key;
}
  c6:	69 2f       	mov	r22, r25
  c8:	78 2f       	mov	r23, r24
  ca:	8c 91       	ld	r24, X
  cc:	90 81       	ld	r25, Z
  ce:	08 95       	ret

000000d0 <usart_init>:

// Initializing UART
void usart_init(unsigned int ubrr)
{
	//set baudrate
	UBRR0H = (unsigned char)(ubrr>>8);
  d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//enable receiver & transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//set frame 8N1
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <USART_vSendByte>:
}

// Transmit data(byte) function
void USART_vSendByte(uint8_t u8Data){
	// Wait for transmit buffer to be empty
	while(!(UCSR0A&(1<<UDRE0)));
  e6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ea:	95 ff       	sbrs	r25, 5
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <USART_vSendByte>
	// Transmit data - load data into transmit register
	UDR0 = u8Data;
  ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f2:	08 95       	ret

000000f4 <Send_Packet>:
}

// Send packet of data
void Send_Packet(uint8_t addr, uint8_t cmd, Key_type key)
{	
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	c8 2e       	mov	r12, r24
 106:	d6 2e       	mov	r13, r22
 108:	e2 2e       	mov	r14, r18
 10a:	f3 2e       	mov	r15, r19
 10c:	04 2f       	mov	r16, r20
 10e:	15 2f       	mov	r17, r21
	for(int i=0;i<5;i++)
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	2e c0       	rjmp	.+92     	; 0x172 <Send_Packet+0x7e>
	{
		USART_vSendByte(SYNC);//send synchronization byte
 116:	8a ea       	ldi	r24, 0xAA	; 170
 118:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte(addr);//send receiver address
 11c:	8c 2d       	mov	r24, r12
 11e:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte((key.count1&0xf0)+(key.y_box1&0x0f));
 122:	90 2f       	mov	r25, r16
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	8e 2d       	mov	r24, r14
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	89 0f       	add	r24, r25
 12c:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte((key.count1&0x0f)+(key.y_box1&0xf0));
 130:	90 2f       	mov	r25, r16
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	8e 2d       	mov	r24, r14
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	89 0f       	add	r24, r25
 13a:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte((key.count2&0xf0)+(key.y_box2&0x0f));
 13e:	91 2f       	mov	r25, r17
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	8f 2d       	mov	r24, r15
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	89 0f       	add	r24, r25
 148:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte((key.count2&0x0f)+(key.y_box2&0xf0));
 14c:	91 2f       	mov	r25, r17
 14e:	90 7f       	andi	r25, 0xF0	; 240
 150:	8f 2d       	mov	r24, r15
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	89 0f       	add	r24, r25
 156:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte(cmd);//send increment command
 15a:	8d 2d       	mov	r24, r13
 15c:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
		USART_vSendByte((addr+key.count1+key.y_box1+key.count2+key.y_box2+cmd)&0x00FF);//send checksum
 160:	8c 2d       	mov	r24, r12
 162:	8e 0d       	add	r24, r14
 164:	80 0f       	add	r24, r16
 166:	8f 0d       	add	r24, r15
 168:	81 0f       	add	r24, r17
 16a:	8d 0d       	add	r24, r13
 16c:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_vSendByte>
}

// Send packet of data
void Send_Packet(uint8_t addr, uint8_t cmd, Key_type key)
{	
	for(int i=0;i<5;i++)
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	c5 30       	cpi	r28, 0x05	; 5
 174:	d1 05       	cpc	r29, r1
 176:	7c f2       	brlt	.-98     	; 0x116 <Send_Packet+0x22>
		USART_vSendByte((key.count2&0x0f)+(key.y_box2&0xf0));
		USART_vSendByte(cmd);//send increment command
		USART_vSendByte((addr+key.count1+key.y_box1+key.count2+key.y_box2+cmd)&0x00FF);//send checksum
	}
	
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	08 95       	ret

0000018a <Main_Init>:

// Main initialization
void Main_Init(void)
{
	DDRB |= (1<<MODULE);
 18a:	84 b1       	in	r24, 0x04	; 4
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00;
 190:	18 b8       	out	0x08, r1	; 8
	//count_number=eeprom_read_word((uint16_t*)KEY_ADDRESS);
	count_number=0;
 192:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <count_number+0x1>
 196:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <count_number>
 19a:	08 95       	ret

0000019c <extint_init>:
}

void extint_init(void){
	EICRA |= (1<<ISC00)|(1<<ISC10)|(1<<ISC11);
 19c:	e9 e6       	ldi	r30, 0x69	; 105
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	8d 60       	ori	r24, 0x0D	; 13
 1a4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)|(1<<INT1) ;
 1a6:	8d b3       	in	r24, 0x1d	; 29
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	8d bb       	out	0x1d, r24	; 29
 1ac:	08 95       	ret

000001ae <main>:
	cli();
}*/

int main(void)
{
	usart_init(MYUBRR);
 1ae:	8f e9       	ldi	r24, 0x9F	; 159
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 68 00 	call	0xd0	; 0xd0 <usart_init>
	Main_Init();
 1b6:	0e 94 c5 00 	call	0x18a	; 0x18a <Main_Init>
	extint_init();
 1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <extint_init>
	//sleep_init();
	while(1)
	{
		if(button_flag == 1){
 1be:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <button_flag>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <main+0x1a>
 1c6:	5d c0       	rjmp	.+186    	; 0x282 <main+0xd4>
			if (bit_is_set(PINC,BUTTON1))// the button is pressed when BUTTON bit is clear
 1c8:	35 9b       	sbis	0x06, 5	; 6
 1ca:	1c c0       	rjmp	.+56     	; 0x204 <main+0x56>
			{	PORTB |= (1<<MODULE);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, CMD1,encrypt_key);// check the state of the button again
 1d2:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <encrypt_key>
 1d6:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <encrypt_key+0x1>
 1da:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <encrypt_key+0x2>
 1de:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <encrypt_key+0x3>
 1e2:	60 e2       	ldi	r22, 0x20	; 32
 1e4:	84 e4       	ldi	r24, 0x44	; 68
 1e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <Send_Packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	80 e7       	ldi	r24, 0x70	; 112
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x42>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x4c>
 1fa:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);button_flag1 = 1;}
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 202:	3b c0       	rjmp	.+118    	; 0x27a <main+0xcc>
			
			else if (bit_is_set(PINC,BUTTON2))// the button is pressed when BUTTON bit is clear
 204:	34 9b       	sbis	0x06, 4	; 6
 206:	1c c0       	rjmp	.+56     	; 0x240 <main+0x92>
			{	PORTB |= (1<<MODULE);
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, CMD2,encrypt_key);
 20e:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <encrypt_key>
 212:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <encrypt_key+0x1>
 216:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <encrypt_key+0x2>
 21a:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <encrypt_key+0x3>
 21e:	62 e2       	ldi	r22, 0x22	; 34
 220:	84 e4       	ldi	r24, 0x44	; 68
 222:	0e 94 7a 00 	call	0xf4	; 0xf4 <Send_Packet>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	80 e7       	ldi	r24, 0x70	; 112
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x7e>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x88>
 236:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);	button_flag1 = 1;}
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 23e:	1d c0       	rjmp	.+58     	; 0x27a <main+0xcc>
			
			else if (bit_is_set(PINC,BUTTON3))// the button is pressed when BUTTON bit is clear
 240:	33 9b       	sbis	0x06, 3	; 6
 242:	1b c0       	rjmp	.+54     	; 0x27a <main+0xcc>
			{	PORTB |= (1<<MODULE);
 244:	85 b1       	in	r24, 0x05	; 5
 246:	81 60       	ori	r24, 0x01	; 1
 248:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, CMD3,encrypt_key);
 24a:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <encrypt_key>
 24e:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <encrypt_key+0x1>
 252:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <encrypt_key+0x2>
 256:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <encrypt_key+0x3>
 25a:	64 e2       	ldi	r22, 0x24	; 36
 25c:	84 e4       	ldi	r24, 0x44	; 68
 25e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Send_Packet>
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	80 e7       	ldi	r24, 0x70	; 112
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0xba>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0xc4>
 272:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);	button_flag1 = 1;}
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
			
			PORTB &= ~(1<<MODULE);
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	85 b9       	out	0x05, r24	; 5
 280:	9e cf       	rjmp	.-196    	; 0x1be <main+0x10>
		}
		else{
			cli();
 282:	f8 94       	cli
			button_flag1=0;
 284:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
			//eeprom_write_word((uint16_t*)KEY_ADDRESS,count_number);
			//sleep_enable();
			cli();
 288:	f8 94       	cli
			//sleep_bod_disable();
			sei();
 28a:	78 94       	sei
 28c:	98 cf       	rjmp	.-208    	; 0x1be <main+0x10>

0000028e <__vector_1>:
		}
	}
	return 0;
}

ISR(INT0_vect){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	if(button_flag1) {button_flag = 0;count_number++;} 
 2b0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 2b4:	88 23       	and	r24, r24
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <__vector_1+0x42>
 2b8:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <button_flag>
 2bc:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <count_number>
 2c0:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <count_number+0x1>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <count_number+0x1>
 2ca:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <count_number>
 2ce:	17 c0       	rjmp	.+46     	; 0x2fe <__vector_1+0x70>
	else             {button_flag = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <button_flag>
				      encrypt_key=encrypt(count_number);
 2d6:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <count_number>
 2da:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <count_number+0x1>
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <encrypt>
 2e2:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <encrypt_key>
 2e6:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <encrypt_key+0x1>
 2ea:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <encrypt_key+0x2>
 2ee:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <encrypt_key+0x3>
 2f2:	8f e2       	ldi	r24, 0x2F	; 47
 2f4:	95 e7       	ldi	r25, 0x75	; 117
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <__vector_1+0x68>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <__vector_1+0x6e>
 2fc:	00 00       	nop
					  _delay_ms(DEBOUNCE_TIME);}
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_2>:

ISR(INT1_vect){
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
	count_number = 150;
 330:	86 e9       	ldi	r24, 0x96	; 150
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <count_number+0x1>
 338:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <count_number>
	PORTB |=(1<<MODULE);
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	85 b9       	out	0x05, r24	; 5
	for (int i=0;i<30000;i++);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 c0       	rjmp	.+2      	; 0x34a <__vector_2+0x2a>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	80 33       	cpi	r24, 0x30	; 48
 34c:	25 e7       	ldi	r18, 0x75	; 117
 34e:	92 07       	cpc	r25, r18
 350:	dc f3       	brlt	.-10     	; 0x348 <__vector_2+0x28>
	PORTB&=~(1<<MODULE);
 352:	85 b1       	in	r24, 0x05	; 5
 354:	8e 7f       	andi	r24, 0xFE	; 254
 356:	85 b9       	out	0x05, r24	; 5
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
