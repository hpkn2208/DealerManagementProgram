
HardwareTX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800200  00800200  000004ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000530  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c37  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000576  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  000024fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_1>
   8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <encrypt>:
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

int encrypt(int count){// count is the counter to sync
	uint8_t	 x_box=b[count];			//Transmitter
  a6:	fc 01       	movw	r30, r24
  a8:	e0 50       	subi	r30, 0x00	; 0
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	e0 81       	ld	r30, Z
	uint8_t	 y_box=b[x_box];
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	e0 50       	subi	r30, 0x00	; 0
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	20 81       	ld	r18, Z
	uint16_t z_box=(count<<8)+y_box;
  b6:	98 2f       	mov	r25, r24
  b8:	88 27       	eor	r24, r24
	return z_box;// Return Address 16bit
}
  ba:	82 0f       	add	r24, r18
  bc:	91 1d       	adc	r25, r1
  be:	08 95       	ret

000000c0 <usart_init>:

// Initializing UART
void usart_init(unsigned int ubrr)
{
	//set baudrate
	UBRR0H = (unsigned char)(ubrr>>8);
  c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//enable receiver & transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//set frame 8N1
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  d4:	08 95       	ret

000000d6 <USART_vSendByte>:
}

// Transmit data(byte) function
void USART_vSendByte(uint8_t u8Data){
	// Wait for transmit buffer to be empty
	while(!(UCSR0A&(1<<UDRE0)));
  d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	95 ff       	sbrs	r25, 5
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <USART_vSendByte>
	// Transmit data - load data into transmit register
	UDR0 = u8Data;
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e2:	08 95       	ret

000000e4 <Send_Packet>:
}

// Send packet of data
void Send_Packet(uint8_t addr, uint8_t cmd, uint16_t key)
{
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	d8 2f       	mov	r29, r24
  ee:	16 2f       	mov	r17, r22
  f0:	c4 2f       	mov	r28, r20
  f2:	05 2f       	mov	r16, r21
	uint8_t highbyte, lowbyte;
	highbyte =key>>8;
	lowbyte  =key&0xFF;
	USART_vSendByte(SYNC);//send synchronization byte
  f4:	8a ea       	ldi	r24, 0xAA	; 170
  f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
	USART_vSendByte(addr);//send receiver address
  fa:	8d 2f       	mov	r24, r29
  fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
	USART_vSendByte(highbyte);
 100:	80 2f       	mov	r24, r16
 102:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
	USART_vSendByte(lowbyte);
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
	USART_vSendByte(cmd);//send increment command
 10c:	81 2f       	mov	r24, r17
 10e:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
	USART_vSendByte((addr+highbyte+lowbyte+cmd)&0x00FF);//send checksum
 112:	80 2f       	mov	r24, r16
 114:	8d 0f       	add	r24, r29
 116:	8c 0f       	add	r24, r28
 118:	81 0f       	add	r24, r17
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART_vSendByte>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <Main_Init>:

// Main initialization
void Main_Init(void)
{
	DDRB |= (1<<MODULE);
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00;
 12e:	18 b8       	out	0x08, r1	; 8
 130:	08 95       	ret

00000132 <extint_init>:
}

void extint_init(void){
	EICRA |= (1<<ISC00)|(1<<ISC10)|(1<<ISC11);
 132:	e9 e6       	ldi	r30, 0x69	; 105
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8d 60       	ori	r24, 0x0D	; 13
 13a:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)|(1<<INT1) ;
 13c:	8d b3       	in	r24, 0x1d	; 29
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	8d bb       	out	0x1d, r24	; 29
 142:	08 95       	ret

00000144 <main>:
	cli();
}*/
// main function - entry point of the program
int main(void)
{
	usart_init(MYUBRR);
 144:	81 e8       	ldi	r24, 0x81	; 129
 146:	96 e0       	ldi	r25, 0x06	; 6
 148:	0e 94 60 00 	call	0xc0	; 0xc0 <usart_init>
	Main_Init();
 14c:	0e 94 94 00 	call	0x128	; 0x128 <Main_Init>
	extint_init();
 150:	0e 94 99 00 	call	0x132	; 0x132 <extint_init>
	//sleep_init();
	while(1)
	{
		if(button_flag == 1){
 154:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <button_flag>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0x1a>
 15c:	51 c0       	rjmp	.+162    	; 0x200 <main+0xbc>
			if (bit_is_set(PINC,BUTTON1))// the button is pressed when BUTTON bit is clear
 15e:	34 9b       	sbis	0x06, 4	; 6
 160:	18 c0       	rjmp	.+48     	; 0x192 <main+0x4e>
			{	PORTB |= (1<<MODULE);
 162:	85 b1       	in	r24, 0x05	; 5
 164:	81 60       	ori	r24, 0x01	; 1
 166:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, RED_TOGGLE,key);// check the state of the button again
 168:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <key>
 16c:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <key+0x1>
 170:	60 e2       	ldi	r22, 0x20	; 32
 172:	84 e4       	ldi	r24, 0x44	; 68
 174:	0e 94 72 00 	call	0xe4	; 0xe4 <Send_Packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x3a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x44>
 188:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);button_flag1 = 1;}
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
 190:	33 c0       	rjmp	.+102    	; 0x1f8 <main+0xb4>
			
			else if (bit_is_set(PINC,BUTTON2))// the button is pressed when BUTTON bit is clear
 192:	32 9b       	sbis	0x06, 2	; 6
 194:	18 c0       	rjmp	.+48     	; 0x1c6 <main+0x82>
			{	PORTB |= (1<<MODULE);
 196:	85 b1       	in	r24, 0x05	; 5
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, BLUE_TOGGLE,key);
 19c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <key>
 1a0:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <key+0x1>
 1a4:	62 e2       	ldi	r22, 0x22	; 34
 1a6:	84 e4       	ldi	r24, 0x44	; 68
 1a8:	0e 94 72 00 	call	0xe4	; 0xe4 <Send_Packet>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x6e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x78>
 1bc:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);	button_flag1 = 1;}
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
 1c4:	19 c0       	rjmp	.+50     	; 0x1f8 <main+0xb4>
			
			else if (bit_is_set(PINC,BUTTON3))// the button is pressed when BUTTON bit is clear
 1c6:	30 9b       	sbis	0x06, 0	; 6
 1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <main+0xb4>
			{	PORTB |= (1<<MODULE);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	85 b9       	out	0x05, r24	; 5
				Send_Packet(RADDR, GREEN_TOGGLE,key);
 1d0:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <key>
 1d4:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <key+0x1>
 1d8:	64 e2       	ldi	r22, 0x24	; 36
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	0e 94 72 00 	call	0xe4	; 0xe4 <Send_Packet>
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	80 e7       	ldi	r24, 0x70	; 112
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0xa2>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0xac>
 1f0:	00 00       	nop
				_delay_ms(LOCK_INPUT_TIME);	button_flag1 = 1;}
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
			
			PORTB &= ~(1<<MODULE);
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	aa cf       	rjmp	.-172    	; 0x154 <main+0x10>
		}
		else{
			cli();
 200:	f8 94       	cli
			button_flag1=0;
 202:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
			//sleep_enable();
			//sleep_bod_disable();
			sei();
 206:	78 94       	sei
 208:	a5 cf       	rjmp	.-182    	; 0x154 <main+0x10>

0000020a <__vector_1>:
		}
	}
	return 0;
}

ISR(INT0_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if(button_flag1) {button_flag = 0; count++;eeprom_update_byte((uint8_t*)KEY_ADDRESS,count);}
 22c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 230:	88 23       	and	r24, r24
 232:	61 f0       	breq	.+24     	; 0x24c <__vector_1+0x42>
 234:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <button_flag>
 238:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <count>
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <count>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 7f 01 	call	0x2fe	; 0x2fe <eeprom_update_byte>
 24a:	16 c0       	rjmp	.+44     	; 0x278 <__vector_1+0x6e>
	else             {button_flag = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <button_flag>
					  count=eeprom_read_byte((uint8_t*)KEY_ADDRESS);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 77 01 	call	0x2ee	; 0x2ee <eeprom_read_byte>
 25a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <count>
				      key=encrypt(count);
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <encrypt>
 264:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <key+0x1>
 268:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <key>
 26c:	8f e2       	ldi	r24, 0x2F	; 47
 26e:	95 e7       	ldi	r25, 0x75	; 117
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <__vector_1+0x66>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__vector_1+0x6c>
 276:	00 00       	nop
					  _delay_ms(DEBOUNCE_TIME);
					  }
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_2>:

ISR(INT1_vect){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	count = 150;eeprom_update_byte((uint8_t*)KEY_ADDRESS,count);
 2bc:	86 e9       	ldi	r24, 0x96	; 150
 2be:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <count>
 2c2:	66 e9       	ldi	r22, 0x96	; 150
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <eeprom_update_byte>
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <eeprom_read_byte>:
 2ee:	f9 99       	sbic	0x1f, 1	; 31
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <eeprom_read_byte>
 2f2:	92 bd       	out	0x22, r25	; 34
 2f4:	81 bd       	out	0x21, r24	; 33
 2f6:	f8 9a       	sbi	0x1f, 0	; 31
 2f8:	99 27       	eor	r25, r25
 2fa:	80 b5       	in	r24, 0x20	; 32
 2fc:	08 95       	ret

000002fe <eeprom_update_byte>:
 2fe:	26 2f       	mov	r18, r22

00000300 <eeprom_update_r18>:
 300:	f9 99       	sbic	0x1f, 1	; 31
 302:	fe cf       	rjmp	.-4      	; 0x300 <eeprom_update_r18>
 304:	92 bd       	out	0x22, r25	; 34
 306:	81 bd       	out	0x21, r24	; 33
 308:	f8 9a       	sbi	0x1f, 0	; 31
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	00 b4       	in	r0, 0x20	; 32
 30e:	02 16       	cp	r0, r18
 310:	39 f0       	breq	.+14     	; 0x320 <eeprom_update_r18+0x20>
 312:	1f ba       	out	0x1f, r1	; 31
 314:	20 bd       	out	0x20, r18	; 32
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	fa 9a       	sbi	0x1f, 2	; 31
 31c:	f9 9a       	sbi	0x1f, 1	; 31
 31e:	0f be       	out	0x3f, r0	; 63
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
