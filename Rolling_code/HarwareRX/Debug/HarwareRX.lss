
HarwareRX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800220  00800220  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000720  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001099  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000850  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076e  00000000  00000000  0000300f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000377d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_1>
   8:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  9e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <decrypt>:
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

int decrypt(uint8_t high, uint8_t low, uint8_t count_predict){
	//Receiver
	uint8_t window_size= 32;
	if (count_predict<255-window_size){
  a6:	24 2f       	mov	r18, r20
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	2f 3d       	cpi	r18, 0xDF	; 223
  ac:	31 05       	cpc	r19, r1
  ae:	ac f4       	brge	.+42     	; 0xda <decrypt+0x34>
		if((high>=count_predict)&&(high<count_predict+window_size)){
  b0:	84 17       	cp	r24, r20
  b2:	68 f1       	brcs	.+90     	; 0x10e <decrypt+0x68>
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	20 5e       	subi	r18, 0xE0	; 224
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	82 17       	cp	r24, r18
  bc:	93 07       	cpc	r25, r19
  be:	54 f5       	brge	.+84     	; 0x114 <decrypt+0x6e>
			if(b[b[high]]==low){
  c0:	fc 01       	movw	r30, r24
  c2:	e0 50       	subi	r30, 0x00	; 0
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	e0 81       	ld	r30, Z
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	86 13       	cpse	r24, r22
  d2:	23 c0       	rjmp	.+70     	; 0x11a <decrypt+0x74>
				return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret
			}else return 0;
		}
	}
	else if (count_predict>=255-window_size){
  da:	2f 3d       	cpi	r18, 0xDF	; 223
  dc:	31 05       	cpc	r19, r1
  de:	04 f1       	brlt	.+64     	; 0x120 <decrypt+0x7a>
		if((high>=count_predict)||(high<(count_predict+window_size))){
  e0:	84 17       	cp	r24, r20
  e2:	38 f4       	brcc	.+14     	; 0xf2 <decrypt+0x4c>
  e4:	48 2f       	mov	r20, r24
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	20 5e       	subi	r18, 0xE0	; 224
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	42 17       	cp	r20, r18
  ee:	53 07       	cpc	r21, r19
  f0:	d4 f4       	brge	.+52     	; 0x126 <decrypt+0x80>
			if(b[b[high]]==low){
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e0 50       	subi	r30, 0x00	; 0
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	e0 81       	ld	r30, Z
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	80 81       	ld	r24, Z
 104:	68 13       	cpse	r22, r24
 106:	12 c0       	rjmp	.+36     	; 0x12c <decrypt+0x86>
				return 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret
			}else return 0;
		}
	}else return 0;
	return 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
	uint8_t window_size= 32;
	if (count_predict<255-window_size){
		if((high>=count_predict)&&(high<count_predict+window_size)){
			if(b[b[high]]==low){
				return 1;
			}else return 0;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
		if((high>=count_predict)||(high<(count_predict+window_size))){
			if(b[b[high]]==low){
				return 1;
			}else return 0;
		}
	}else return 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret
	return 0;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
	}
	else if (count_predict>=255-window_size){
		if((high>=count_predict)||(high<(count_predict+window_size))){
			if(b[b[high]]==low){
				return 1;
			}else return 0;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else return 0;
	return 0;
}
 130:	08 95       	ret

00000132 <usart_init>:
// Initializing UART
void usart_init(unsigned int ubrr)
{
	//set baudrate
	UBRR0H = (unsigned char)(ubrr>>8);
 132:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//enable receiver & transmitter
	UCSR0B=(1<<RXEN0);
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//set frame 8N1
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 146:	08 95       	ret

00000148 <USART_vReceiveByte>:

// Read the value out of the UART buffer
uint8_t USART_vReceiveByte(void)
{
	// Wait until a byte has been received
	while((UCSR0A&(1<<RXC0)) == 0);
 148:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	88 23       	and	r24, r24
 14e:	e4 f7       	brge	.-8      	; 0x148 <USART_vReceiveByte>
	// Return received data
	return UDR0;
 150:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 154:	08 95       	ret

00000156 <LCD_Command>:

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
 156:	95 b1       	in	r25, 0x05	; 5
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	28 2f       	mov	r18, r24
 15c:	20 7f       	andi	r18, 0xF0	; 240
 15e:	92 2b       	or	r25, r18
 160:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
 162:	95 b1       	in	r25, 0x05	; 5
 164:	9d 7f       	andi	r25, 0xFD	; 253
 166:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RW);		// RW = 0
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	9b 7f       	andi	r25, 0xFB	; 251
 16c:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);		/* Enable pulse */
 16e:	95 b1       	in	r25, 0x05	; 5
 170:	98 60       	ori	r25, 0x08	; 8
 172:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	32 e0       	ldi	r19, 0x02	; 2
 176:	3a 95       	dec	r19
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Command+0x20>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_Command+0x26>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	97 7f       	andi	r25, 0xF7	; 247
 180:	95 b9       	out	0x05, r25	; 5
 182:	ef e8       	ldi	r30, 0x8F	; 143
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Command+0x30>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Command+0x36>
 18c:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
 18e:	25 b1       	in	r18, 0x05	; 5
 190:	f0 e1       	ldi	r31, 0x10	; 16
 192:	8f 9f       	mul	r24, r31
 194:	c0 01       	movw	r24, r0
 196:	11 24       	eor	r1, r1
 198:	92 2f       	mov	r25, r18
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	89 2b       	or	r24, r25
 19e:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	32 e0       	ldi	r19, 0x02	; 2
 1a8:	3a 95       	dec	r19
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Command+0x52>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Command+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Command+0x62>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Command+0x68>
 1be:	00 00       	nop
 1c0:	08 95       	ret

000001c2 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	28 2f       	mov	r18, r24
 1c8:	20 7f       	andi	r18, 0xF0	; 240
 1ca:	92 2b       	or	r25, r18
 1cc:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	92 60       	ori	r25, 0x02	; 2
 1d2:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RW);		// RW = 0
 1d4:	95 b1       	in	r25, 0x05	; 5
 1d6:	9b 7f       	andi	r25, 0xFB	; 251
 1d8:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	98 60       	ori	r25, 0x08	; 8
 1de:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	32 e0       	ldi	r19, 0x02	; 2
 1e2:	3a 95       	dec	r19
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_Char+0x20>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_Char+0x26>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	97 7f       	andi	r25, 0xF7	; 247
 1ec:	95 b9       	out	0x05, r25	; 5
 1ee:	ef e8       	ldi	r30, 0x8F	; 143
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Char+0x30>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_Char+0x36>
 1f8:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 1fa:	25 b1       	in	r18, 0x05	; 5
 1fc:	f0 e1       	ldi	r31, 0x10	; 16
 1fe:	8f 9f       	mul	r24, r31
 200:	c0 01       	movw	r24, r0
 202:	11 24       	eor	r1, r1
 204:	92 2f       	mov	r25, r18
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	89 2b       	or	r24, r25
 20a:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	85 b9       	out	0x05, r24	; 5
 212:	32 e0       	ldi	r19, 0x02	; 2
 214:	3a 95       	dec	r19
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_Char+0x52>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_Char+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	87 7f       	andi	r24, 0xF7	; 247
 21e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Char+0x62>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Char+0x68>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	03 c0       	rjmp	.+6      	; 0x244 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
 23e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	f8 01       	movw	r30, r16
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f7 cf       	rjmp	.-18     	; 0x23e <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <HextoASCII>:

void HextoASCII(unsigned char hex)
{	
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
	unsigned char temp_L;           // dummy variable that will hold LSBs of Hex number
	unsigned char temp_H;           // dummy variable that will hold MSBs of Hex number
	 temp_H = hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
	 temp_H = temp_H >> 4;           //
 25e:	82 95       	swap	r24
 260:	8f 70       	andi	r24, 0x0F	; 15
	if(temp_H >9)                   // Check if the number is a letter
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	10 f0       	brcs	.+4      	; 0x26a <HextoASCII+0x10>
	  temp_H += 0x37;             // Convert the number to a letter in ASCII
 266:	89 5c       	subi	r24, 0xC9	; 201
 268:	01 c0       	rjmp	.+2      	; 0x26c <HextoASCII+0x12>
	else
		temp_H += 0x30;             // Convert the number to ASCII number
 26a:	80 5d       	subi	r24, 0xD0	; 208
	
	LCD_Char(temp_H);           // Display the number
 26c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_Char>

	temp_L = hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
 270:	cf 70       	andi	r28, 0x0F	; 15
	if(temp_L >9)                   // Check if the the number is a letter
 272:	ca 30       	cpi	r28, 0x0A	; 10
 274:	18 f0       	brcs	.+6      	; 0x27c <HextoASCII+0x22>
		temp_L += 0x37;             // Convert the number to a letter in ASCII
 276:	87 e3       	ldi	r24, 0x37	; 55
 278:	8c 0f       	add	r24, r28
 27a:	02 c0       	rjmp	.+4      	; 0x280 <HextoASCII+0x26>
	else
		temp_L += 0x30;             // Convert the number to ASCII number
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	8c 0f       	add	r24, r28
	LCD_Char(temp_L);           // Display the number
 280:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_Char>
}
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_goto_xy>:

void LCD_goto_xy (char row, char col)	/* Send string to LCD with xy position */
{
	if (row == 0 && col<16)
 288:	81 11       	cpse	r24, r1
 28a:	08 c0       	rjmp	.+16     	; 0x29c <LCD_goto_xy+0x14>
 28c:	60 31       	cpi	r22, 0x10	; 16
 28e:	30 f4       	brcc	.+12     	; 0x29c <LCD_goto_xy+0x14>
	LCD_Command((col & 0x0F)|0x80);	/* Command of first row and required position<16 */
 290:	86 2f       	mov	r24, r22
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	80 68       	ori	r24, 0x80	; 128
 296:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
 29a:	08 95       	ret
	else if (row == 1 && col<16)
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	39 f4       	brne	.+14     	; 0x2ae <LCD_goto_xy+0x26>
 2a0:	60 31       	cpi	r22, 0x10	; 16
 2a2:	28 f4       	brcc	.+10     	; 0x2ae <LCD_goto_xy+0x26>
	LCD_Command((col & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 2a4:	86 2f       	mov	r24, r22
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	80 6c       	ori	r24, 0xC0	; 192
 2aa:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
 2ae:	08 95       	ret

000002b0 <LCD_Clear>:
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	9f e0       	ldi	r25, 0x0F	; 15
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_Clear+0xa>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_Clear+0x10>
 2c0:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
 2c8:	08 95       	ret

000002ca <up>:
}

void up(void){
	if(!(PINC&(1<<ABOVE)))	PORTC=0x01;
 2ca:	33 99       	sbic	0x06, 3	; 6
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <up+0xa>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	08 95       	ret
	else					PORTC=0x02;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	88 b9       	out	0x08, r24	; 8
 2d8:	08 95       	ret

000002da <stop>:
}

void stop(void){
	PORTC=0x02;
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	88 b9       	out	0x08, r24	; 8
 2de:	08 95       	ret

000002e0 <down>:
}

void down(void){
	if(!(PINC&(1<<BELOW)))	PORTC=0x04;
 2e0:	34 99       	sbic	0x06, 4	; 6
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <down+0xa>
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	08 95       	ret
	else					PORTC=0x02;
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	88 b9       	out	0x08, r24	; 8
 2ee:	08 95       	ret

000002f0 <extint_init>:
}

void extint_init(void){
	EICRA |= (1<<ISC00)|(1<<ISC01)|(1<<ISC11)|(1<<ISC10);
 2f0:	e9 e6       	ldi	r30, 0x69	; 105
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	8f 60       	ori	r24, 0x0F	; 15
 2f8:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)|(1<<INT1);
 2fa:	8d b3       	in	r24, 0x1d	; 29
 2fc:	83 60       	ori	r24, 0x03	; 3
 2fe:	8d bb       	out	0x1d, r24	; 29
 300:	08 95       	ret

00000302 <LCD_Init>:
 302:	8f e3       	ldi	r24, 0x3F	; 63
 304:	9c e9       	ldi	r25, 0x9C	; 156
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_Init+0x4>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_Init+0xa>
 30c:	00 00       	nop
}

void LCD_Init (void)			/* LCD Initialize function */
{
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Command>
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	21 ee       	ldi	r18, 0xE1	; 225
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	91 50       	subi	r25, 0x01	; 1
 334:	20 40       	sbci	r18, 0x00	; 0
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x30>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x3a>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <Main_Init>:
}

// Main initialization
void Main_Init(void)
{
	count = eeprom_read_byte((uint8_t*)KEY_ADDRESS);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 60 02 	call	0x4c0	; 0x4c0 <eeprom_read_byte>
 348:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
	DDRC=0xFFu;		//	Set all pins of the PORTC as output.
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	87 b9       	out	0x07, r24	; 7
	PORTC=0x02u;	//
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	98 b9       	out	0x08, r25	; 8
	LCD_Dir = 0xFF;	// Make LCD port direction as o/p 
 354:	84 b9       	out	0x04, r24	; 4
	sei();			//enable global interrupts
 356:	78 94       	sei
 358:	08 95       	ret

0000035a <main>:
}

// main function - entry point of the program
int main(void)
{
	usart_init(MYUBRR);
 35a:	81 e8       	ldi	r24, 0x81	; 129
 35c:	96 e0       	ldi	r25, 0x06	; 6
 35e:	0e 94 99 00 	call	0x132	; 0x132 <usart_init>
	extint_init();
 362:	0e 94 78 01 	call	0x2f0	; 0x2f0 <extint_init>
	Main_Init();
 366:	0e 94 a0 01 	call	0x340	; 0x340 <Main_Init>
	LCD_Init();
 36a:	0e 94 81 01 	call	0x302	; 0x302 <LCD_Init>
	LCD_String("Working on...");
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_String>
	while(1)
	{	
		//define variables
		uint8_t raddress, highbyte, lowbyte, data, chk;
		// receive destination address
		raddress= USART_vReceiveByte();
 376:	0e 94 a4 00 	call	0x148	; 0x148 <USART_vReceiveByte>
 37a:	c8 2f       	mov	r28, r24
		// receive higbyte
		highbyte= USART_vReceiveByte();
 37c:	0e 94 a4 00 	call	0x148	; 0x148 <USART_vReceiveByte>
 380:	d8 2f       	mov	r29, r24
		// receive lowbyte
		lowbyte= USART_vReceiveByte();
 382:	0e 94 a4 00 	call	0x148	; 0x148 <USART_vReceiveByte>
 386:	18 2f       	mov	r17, r24
		// receive data
		data   = USART_vReceiveByte();
 388:	0e 94 a4 00 	call	0x148	; 0x148 <USART_vReceiveByte>
 38c:	08 2f       	mov	r16, r24
		// receive checksum
		chk    = USART_vReceiveByte();
 38e:	0e 94 a4 00 	call	0x148	; 0x148 <USART_vReceiveByte>
 392:	f8 2e       	mov	r15, r24
		// compare received checksum with calculated
		if(chk==((raddress+highbyte+lowbyte+data)&0x00FF))//if match perform operations
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	8d 2f       	mov	r24, r29
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	8c 0f       	add	r24, r28
 39e:	91 1d       	adc	r25, r1
 3a0:	81 0f       	add	r24, r17
 3a2:	91 1d       	adc	r25, r1
 3a4:	80 0f       	add	r24, r16
 3a6:	91 1d       	adc	r25, r1
 3a8:	99 27       	eor	r25, r25
 3aa:	28 17       	cp	r18, r24
 3ac:	39 07       	cpc	r19, r25
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0x58>
 3b0:	50 c0       	rjmp	.+160    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		{// if transmitter address match
			if(raddress==RADDR)
 3b2:	c4 34       	cpi	r28, 0x44	; 68
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <main+0x5e>
 3b6:	4d c0       	rjmp	.+154    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{//if command data match
				if(decrypt(highbyte,lowbyte,count))
 3b8:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <__data_end>
 3bc:	61 2f       	mov	r22, r17
 3be:	8d 2f       	mov	r24, r29
 3c0:	0e 94 53 00 	call	0xa6	; 0xa6 <decrypt>
 3c4:	89 2b       	or	r24, r25
 3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x70>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				{
					PORTC|=(1<<5);//buzzer on
 3ca:	88 b1       	in	r24, 0x08	; 8
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	88 b9       	out	0x08, r24	; 8
					LCD_Clear();
 3d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Clear>
					LCD_String("Code:");
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_String>
					HextoASCII(raddress);
 3dc:	8c 2f       	mov	r24, r28
 3de:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					//HextoASCII(count);
					HextoASCII(highbyte);
 3e2:	8d 2f       	mov	r24, r29
 3e4:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					HextoASCII(lowbyte);
 3e8:	81 2f       	mov	r24, r17
 3ea:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					HextoASCII(data);
 3ee:	80 2f       	mov	r24, r16
 3f0:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					HextoASCII(chk);
 3f4:	8f 2d       	mov	r24, r15
 3f6:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					LCD_goto_xy(1,0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 44 01 	call	0x288	; 0x288 <LCD_goto_xy>
					LCD_String("Last:");
 402:	84 e1       	ldi	r24, 0x14	; 20
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_String>
					HextoASCII(count);
 40a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 40e:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					LCD_String(" Now:");
 412:	8a e1       	ldi	r24, 0x1A	; 26
 414:	92 e0       	ldi	r25, 0x02	; 2
 416:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_String>
					HextoASCII(highbyte);
 41a:	8d 2f       	mov	r24, r29
 41c:	0e 94 2d 01 	call	0x25a	; 0x25a <HextoASCII>
					eeprom_update_byte((uint8_t*)KEY_ADDRESS,highbyte);
 420:	6d 2f       	mov	r22, r29
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_update_byte>
					if     (data==RED_TOGGLE  )	  up();
 42a:	00 32       	cpi	r16, 0x20	; 32
 42c:	19 f4       	brne	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	0e 94 65 01 	call	0x2ca	; 0x2ca <up>
 432:	09 c0       	rjmp	.+18     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					else if(data==BLUE_TOGGLE )	stop();
 434:	02 32       	cpi	r16, 0x22	; 34
 436:	19 f4       	brne	.+6      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 438:	0e 94 6d 01 	call	0x2da	; 0x2da <stop>
 43c:	04 c0       	rjmp	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					else if(data==GREEN_TOGGLE)	down();
 43e:	04 32       	cpi	r16, 0x24	; 36
 440:	11 f4       	brne	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	0e 94 70 01 	call	0x2e0	; 0x2e0 <down>
					count = eeprom_read_byte((uint8_t*)KEY_ADDRESS);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <eeprom_read_byte>
 44e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
				}
			}
		}
		PORTC&=~(1<<5);//buzzer of
 452:	88 b1       	in	r24, 0x08	; 8
 454:	8f 7d       	andi	r24, 0xDF	; 223
 456:	88 b9       	out	0x08, r24	; 8
		//if((!(PINC&(1<<3)))|(!(PINC&(1<<4)))){
		//	stop();}
	}
 458:	8e cf       	rjmp	.-228    	; 0x376 <main+0x1c>

0000045a <__vector_1>:
	return 0;
}

ISR(INT0_vect){
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	stop();
 47c:	0e 94 6d 01 	call	0x2da	; 0x2da <stop>
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_2>:

ISR(INT1_vect){
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	8f 93       	push	r24
	count = 150;
 4ae:	86 e9       	ldi	r24, 0x96	; 150
 4b0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
 4b4:	8f 91       	pop	r24
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <eeprom_read_byte>:
 4c0:	f9 99       	sbic	0x1f, 1	; 31
 4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <eeprom_read_byte>
 4c4:	92 bd       	out	0x22, r25	; 34
 4c6:	81 bd       	out	0x21, r24	; 33
 4c8:	f8 9a       	sbi	0x1f, 0	; 31
 4ca:	99 27       	eor	r25, r25
 4cc:	80 b5       	in	r24, 0x20	; 32
 4ce:	08 95       	ret

000004d0 <eeprom_update_byte>:
 4d0:	26 2f       	mov	r18, r22

000004d2 <eeprom_update_r18>:
 4d2:	f9 99       	sbic	0x1f, 1	; 31
 4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <eeprom_update_r18>
 4d6:	92 bd       	out	0x22, r25	; 34
 4d8:	81 bd       	out	0x21, r24	; 33
 4da:	f8 9a       	sbi	0x1f, 0	; 31
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	00 b4       	in	r0, 0x20	; 32
 4e0:	02 16       	cp	r0, r18
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <eeprom_update_r18+0x20>
 4e4:	1f ba       	out	0x1f, r1	; 31
 4e6:	20 bd       	out	0x20, r18	; 32
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	fa 9a       	sbi	0x1f, 2	; 31
 4ee:	f9 9a       	sbi	0x1f, 1	; 31
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
