
SimulateRX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022e  00800100  00000b42  00000bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080032e  0080032e  00000e04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d4  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000752  00000000  00000000  0000289f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090b  00000000  00000000  000036c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_1>
   8:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  9e:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <decrypt>:
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0xc1, 0x1d, 0x9e, 0xc0,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x31,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, 0x07 };

int decrypt(uint8_t temp_1, uint8_t temp_2 , uint8_t temp_3, uint8_t temp_4, uint8_t count_predict){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
	//Receiver
	
	uint16_t  window_size = 32;
	uint8_t   count1=(temp_1&0xf0)+(temp_2&0x0f);
  aa:	e8 2f       	mov	r30, r24
  ac:	e0 7f       	andi	r30, 0xF0	; 240
  ae:	96 2f       	mov	r25, r22
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	e9 0f       	add	r30, r25
	uint8_t   count2=(temp_3&0xf0)+(temp_4&0x0f);
  b4:	a4 2f       	mov	r26, r20
  b6:	a0 7f       	andi	r26, 0xF0	; 240
  b8:	92 2f       	mov	r25, r18
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	a9 0f       	add	r26, r25
	uint8_t   y_box1=(temp_1&0x0f)+(temp_2&0xf0);
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	60 7f       	andi	r22, 0xF0	; 240
  c2:	68 0f       	add	r22, r24
	uint8_t   y_box2=(temp_3&0x0f)+(temp_4&0xf0);
  c4:	4f 70       	andi	r20, 0x0F	; 15
  c6:	20 7f       	andi	r18, 0xF0	; 240
  c8:	24 0f       	add	r18, r20
	uint16_t  temp_count = (count1<<8) + count2 ;
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	9e 2f       	mov	r25, r30
  ce:	88 27       	eor	r24, r24
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8a 0f       	add	r24, r26
  d4:	9b 1f       	adc	r25, r27
	
	if (count_predict<65535-window_size){
		if((temp_count>=count_predict)&&(temp_count<count_predict+window_size)){
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	80 17       	cp	r24, r16
  da:	91 07       	cpc	r25, r17
  dc:	d0 f0       	brcs	.+52     	; 0x112 <decrypt+0x6c>
  de:	00 5e       	subi	r16, 0xE0	; 224
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
  e2:	80 17       	cp	r24, r16
  e4:	91 07       	cpc	r25, r17
  e6:	c0 f4       	brcc	.+48     	; 0x118 <decrypt+0x72>
			if( (a[a[count1]]==y_box1) && (b[b[count2]]==y_box2) ){
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	e0 81       	ld	r30, Z
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	80 81       	ld	r24, Z
  f6:	68 13       	cpse	r22, r24
  f8:	12 c0       	rjmp	.+36     	; 0x11e <decrypt+0x78>
  fa:	a0 50       	subi	r26, 0x00	; 0
  fc:	bf 4f       	sbci	r27, 0xFF	; 255
  fe:	ec 91       	ld	r30, X
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e0 50       	subi	r30, 0x00	; 0
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	28 17       	cp	r18, r24
 10a:	61 f0       	breq	.+24     	; 0x124 <decrypt+0x7e>
				return 1;
			}else return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0b c0       	rjmp	.+22     	; 0x128 <decrypt+0x82>
			if( (a[a[count1]]==y_box1) && (b[b[count2]]==y_box2) ){
				return 1;
			}else return 0;
		}
	}else return 0;
	return 0;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 c0       	rjmp	.+16     	; 0x128 <decrypt+0x82>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	05 c0       	rjmp	.+10     	; 0x128 <decrypt+0x82>
	
	if (count_predict<65535-window_size){
		if((temp_count>=count_predict)&&(temp_count<count_predict+window_size)){
			if( (a[a[count1]]==y_box1) && (b[b[count2]]==y_box2) ){
				return 1;
			}else return 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <decrypt+0x82>
	uint16_t  temp_count = (count1<<8) + count2 ;
	
	if (count_predict<65535-window_size){
		if((temp_count>=count_predict)&&(temp_count<count_predict+window_size)){
			if( (a[a[count1]]==y_box1) && (b[b[count2]]==y_box2) ){
				return 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
				return 1;
			}else return 0;
		}
	}else return 0;
	return 0;
}
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <usart_init>:

// Initializing UART
void usart_init(unsigned int ubrr)
{
	//set baudrate
	UBRR0H = (unsigned char)(ubrr>>8);
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//enable receiver & transmitter
	UCSR0B=(1<<RXEN0);
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//set frame 8N1
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <USART_vReceiveByte>:

// Read the value out of the UART buffer
uint8_t USART_vReceiveByte(void)
{
	// Wait until a byte has been received
	while((UCSR0A&(1<<RXC0)) == 0);
 144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	88 23       	and	r24, r24
 14a:	e4 f7       	brge	.-8      	; 0x144 <USART_vReceiveByte>
	// Return received data
	return UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 150:	08 95       	ret

00000152 <LCD_Command>:

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
 152:	95 b1       	in	r25, 0x05	; 5
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	9d 7f       	andi	r25, 0xFD	; 253
 162:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RW);		// RW = 0
 164:	95 b1       	in	r25, 0x05	; 5
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);		/* Enable pulse */
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	98 60       	ori	r25, 0x08	; 8
 16e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	32 e0       	ldi	r19, 0x02	; 2
 172:	3a 95       	dec	r19
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_Command+0x20>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_Command+0x26>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	97 7f       	andi	r25, 0xF7	; 247
 17c:	95 b9       	out	0x05, r25	; 5
 17e:	ef e8       	ldi	r30, 0x8F	; 143
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Command+0x30>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Command+0x36>
 188:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
 18a:	25 b1       	in	r18, 0x05	; 5
 18c:	f0 e1       	ldi	r31, 0x10	; 16
 18e:	8f 9f       	mul	r24, r31
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	92 2f       	mov	r25, r18
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	89 2b       	or	r24, r25
 19a:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	32 e0       	ldi	r19, 0x02	; 2
 1a4:	3a 95       	dec	r19
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Command+0x52>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Command+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e9       	ldi	r24, 0x9F	; 159
 1b2:	9f e0       	ldi	r25, 0x0F	; 15
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Command+0x62>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Command+0x68>
 1ba:	00 00       	nop
 1bc:	08 95       	ret

000001be <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
 1be:	95 b1       	in	r25, 0x05	; 5
 1c0:	9f 70       	andi	r25, 0x0F	; 15
 1c2:	28 2f       	mov	r18, r24
 1c4:	20 7f       	andi	r18, 0xF0	; 240
 1c6:	92 2b       	or	r25, r18
 1c8:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	92 60       	ori	r25, 0x02	; 2
 1ce:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RW);		// RW = 0
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	9b 7f       	andi	r25, 0xFB	; 251
 1d4:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
 1d6:	95 b1       	in	r25, 0x05	; 5
 1d8:	98 60       	ori	r25, 0x08	; 8
 1da:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	32 e0       	ldi	r19, 0x02	; 2
 1de:	3a 95       	dec	r19
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Char+0x20>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_Char+0x26>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1e4:	95 b1       	in	r25, 0x05	; 5
 1e6:	97 7f       	andi	r25, 0xF7	; 247
 1e8:	95 b9       	out	0x05, r25	; 5
 1ea:	ef e8       	ldi	r30, 0x8F	; 143
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Char+0x30>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Char+0x36>
 1f4:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 1f6:	25 b1       	in	r18, 0x05	; 5
 1f8:	f0 e1       	ldi	r31, 0x10	; 16
 1fa:	8f 9f       	mul	r24, r31
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	92 2f       	mov	r25, r18
 202:	9f 70       	andi	r25, 0x0F	; 15
 204:	89 2b       	or	r24, r25
 206:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	32 e0       	ldi	r19, 0x02	; 2
 210:	3a 95       	dec	r19
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_Char+0x52>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_Char+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_Char+0x62>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_Char+0x68>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
 23a:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	f8 01       	movw	r30, r16
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	80 81       	ld	r24, Z
 248:	81 11       	cpse	r24, r1
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <HextoASCII>:

void HextoASCII(unsigned char hex)
{	
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	unsigned char temp_L;           // dummy variable that will hold LSBs of Hex number
	unsigned char temp_H;           // dummy variable that will hold MSBs of Hex number
	 temp_H = hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
	 temp_H = temp_H >> 4;           //
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
	if(temp_H >9)                   // Check if the number is a letter
 25e:	8a 30       	cpi	r24, 0x0A	; 10
 260:	10 f0       	brcs	.+4      	; 0x266 <HextoASCII+0x10>
	  temp_H += 0x37;             // Convert the number to a letter in ASCII
 262:	89 5c       	subi	r24, 0xC9	; 201
 264:	01 c0       	rjmp	.+2      	; 0x268 <HextoASCII+0x12>
	else
		temp_H += 0x30;             // Convert the number to ASCII number
 266:	80 5d       	subi	r24, 0xD0	; 208
	
	LCD_Char(temp_H);           // Display the number
 268:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Char>

	temp_L = hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
 26c:	cf 70       	andi	r28, 0x0F	; 15
	if(temp_L >9)                   // Check if the the number is a letter
 26e:	ca 30       	cpi	r28, 0x0A	; 10
 270:	18 f0       	brcs	.+6      	; 0x278 <HextoASCII+0x22>
		temp_L += 0x37;             // Convert the number to a letter in ASCII
 272:	87 e3       	ldi	r24, 0x37	; 55
 274:	8c 0f       	add	r24, r28
 276:	02 c0       	rjmp	.+4      	; 0x27c <HextoASCII+0x26>
	else
		temp_L += 0x30;             // Convert the number to ASCII number
 278:	80 e3       	ldi	r24, 0x30	; 48
 27a:	8c 0f       	add	r24, r28
	LCD_Char(temp_L);           // Display the number
 27c:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Char>
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LCD_goto_xy>:

void LCD_goto_xy (char row, char col)	/* Send string to LCD with xy position */
{
	if (row == 0 && col<16)
 284:	81 11       	cpse	r24, r1
 286:	08 c0       	rjmp	.+16     	; 0x298 <LCD_goto_xy+0x14>
 288:	60 31       	cpi	r22, 0x10	; 16
 28a:	30 f4       	brcc	.+12     	; 0x298 <LCD_goto_xy+0x14>
	LCD_Command((col & 0x0F)|0x80);	/* Command of first row and required position<16 */
 28c:	86 2f       	mov	r24, r22
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	80 68       	ori	r24, 0x80	; 128
 292:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
 296:	08 95       	ret
	else if (row == 1 && col<16)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	39 f4       	brne	.+14     	; 0x2aa <LCD_goto_xy+0x26>
 29c:	60 31       	cpi	r22, 0x10	; 16
 29e:	28 f4       	brcc	.+10     	; 0x2aa <LCD_goto_xy+0x26>
	LCD_Command((col & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 2a0:	86 2f       	mov	r24, r22
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	80 6c       	ori	r24, 0xC0	; 192
 2a6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
 2aa:	08 95       	ret

000002ac <LCD_Clear>:
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_Clear+0xa>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Clear+0x10>
 2bc:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
 2c4:	08 95       	ret

000002c6 <up>:
}

void up(void){
	if(!(PINC&(1<<ABOVE)))	PORTC=0x06;
 2c6:	33 99       	sbic	0x06, 3	; 6
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <up+0xa>
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	88 b9       	out	0x08, r24	; 8
 2ce:	08 95       	ret
	else					PORTC=0x05;
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	88 b9       	out	0x08, r24	; 8
 2d4:	08 95       	ret

000002d6 <stop>:
}

void stop(void){
	PORTC=0x05;
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	88 b9       	out	0x08, r24	; 8
 2da:	08 95       	ret

000002dc <down>:
}

void down(void){
	if(!(PINC&(1<<BELOW)))	PORTC=0x03;
 2dc:	34 99       	sbic	0x06, 4	; 6
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <down+0xa>
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	88 b9       	out	0x08, r24	; 8
 2e4:	08 95       	ret
	else					PORTC=0x05;
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	88 b9       	out	0x08, r24	; 8
 2ea:	08 95       	ret

000002ec <extint_init>:
}

void extint_init(void){
	EICRA |= (1<<ISC00)|(1<<ISC01)|(1<<ISC11)|(1<<ISC10);
 2ec:	e9 e6       	ldi	r30, 0x69	; 105
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	8f 60       	ori	r24, 0x0F	; 15
 2f4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0) | (1<<INT1);
 2f6:	8d b3       	in	r24, 0x1d	; 29
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	8d bb       	out	0x1d, r24	; 29
 2fc:	08 95       	ret

000002fe <LCD_Init>:
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	9c e9       	ldi	r25, 0x9C	; 156
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_Init+0x4>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_Init+0xa>
 308:	00 00       	nop
}

void LCD_Init (void)			/* LCD Initialize function */
{
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 310:	88 e2       	ldi	r24, 0x28	; 40
 312:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Command>
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	21 ee       	ldi	r18, 0xE1	; 225
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	91 50       	subi	r25, 0x01	; 1
 330:	20 40       	sbci	r18, 0x00	; 0
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <LCD_Init+0x30>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_Init+0x3a>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <Main_Init>:
	_delay_ms(200);
}

// Main initialization
void Main_Init(void)
{
 33c:	cf 93       	push	r28
	DDRC=0xFFu;		//	Set all pins of the PORTC as output.
 33e:	cf ef       	ldi	r28, 0xFF	; 255
 340:	c7 b9       	out	0x07, r28	; 7
	stop();
 342:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <stop>
	LCD_Dir = 0xFF;	// Make LCD port direction as o/p
 346:	c4 b9       	out	0x04, r28	; 4
	count=0; 
 348:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <__data_end+0x1>
 34c:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <__data_end>
	//count=eeprom_read_word((uint16_t*)KEY_ADDRESS);
	sei();			//enable global interrupts
 350:	78 94       	sei
}
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <main>:

// main function - entry point of the program
int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <main+0x6>
 35c:	00 d0       	rcall	.+0      	; 0x35e <main+0x8>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	usart_init(MYUBRR);
 362:	8f e9       	ldi	r24, 0x9F	; 159
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 97 00 	call	0x12e	; 0x12e <usart_init>
	extint_init();
 36a:	0e 94 76 01 	call	0x2ec	; 0x2ec <extint_init>
	Main_Init();
 36e:	0e 94 9e 01 	call	0x33c	; 0x33c <Main_Init>
	LCD_Init();
 372:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Init>
	LCD_String("Working on...");
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	93 e0       	ldi	r25, 0x03	; 3
 37a:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
	char baudrate[4];
	sprintf(baudrate,"%d",BAUD);
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	8f 93       	push	r24
 382:	80 eb       	ldi	r24, 0xB0	; 176
 384:	8f 93       	push	r24
 386:	8e e0       	ldi	r24, 0x0E	; 14
 388:	93 e0       	ldi	r25, 0x03	; 3
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	8e 01       	movw	r16, r28
 390:	0f 5f       	subi	r16, 0xFF	; 255
 392:	1f 4f       	sbci	r17, 0xFF	; 255
 394:	1f 93       	push	r17
 396:	0f 93       	push	r16
 398:	0e 94 b5 02 	call	0x56a	; 0x56a <sprintf>
	LCD_goto_xy(1,0);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 42 01 	call	0x284	; 0x284 <LCD_goto_xy>
	LCD_String("Baudrate: ");
 3a4:	81 e1       	ldi	r24, 0x11	; 17
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
	LCD_String(baudrate);
 3ac:	c8 01       	movw	r24, r16
 3ae:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
	while(1)
	{	
		//define variables
		uint8_t raddress, temp_1, temp_2,temp_3,temp_4, data, chk;
		// receive destination address
		raddress= USART_vReceiveByte();
 3be:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3c2:	18 2f       	mov	r17, r24
		// receive higbyte
		temp_1= USART_vReceiveByte();
 3c4:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3c8:	c8 2e       	mov	r12, r24
		// receive lowbyte
		temp_2= USART_vReceiveByte();
 3ca:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3ce:	d8 2e       	mov	r13, r24
		// receive higbyte
		temp_3= USART_vReceiveByte();
 3d0:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3d4:	e8 2e       	mov	r14, r24
		// receive lowbyte
		temp_4= USART_vReceiveByte();
 3d6:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3da:	f8 2e       	mov	r15, r24
		// receive data
		data   = USART_vReceiveByte();
 3dc:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3e0:	b8 2e       	mov	r11, r24
		// receive checksum
		chk    = USART_vReceiveByte();
 3e2:	0e 94 a2 00 	call	0x144	; 0x144 <USART_vReceiveByte>
 3e6:	a8 2e       	mov	r10, r24
	if (raddress==RADDR)
 3e8:	14 34       	cpi	r17, 0x44	; 68
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0x98>
 3ec:	73 c0       	rjmp	.+230    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
	{
		// compare received checksum with calculated
		if(chk==((raddress+temp_1+temp_2+temp_3+temp_4+data)&0x00FF))//if match perform operations
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	8c 2d       	mov	r24, r12
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	81 0f       	add	r24, r17
 3f8:	91 1d       	adc	r25, r1
 3fa:	8d 0d       	add	r24, r13
 3fc:	91 1d       	adc	r25, r1
 3fe:	8e 0d       	add	r24, r14
 400:	91 1d       	adc	r25, r1
 402:	8f 0d       	add	r24, r15
 404:	91 1d       	adc	r25, r1
 406:	8b 0d       	add	r24, r11
 408:	91 1d       	adc	r25, r1
 40a:	99 27       	eor	r25, r25
 40c:	28 17       	cp	r18, r24
 40e:	39 07       	cpc	r19, r25
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	60 c0       	rjmp	.+192    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			if(decrypt(temp_1,temp_2,temp_3,temp_4,count))
 414:	00 91 2e 03 	lds	r16, 0x032E	; 0x80032e <__data_end>
 418:	2f 2d       	mov	r18, r15
 41a:	4e 2d       	mov	r20, r14
 41c:	6d 2d       	mov	r22, r13
 41e:	8c 2d       	mov	r24, r12
 420:	0e 94 53 00 	call	0xa6	; 0xa6 <decrypt>
 424:	89 2b       	or	r24, r25
 426:	09 f4       	brne	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	55 c0       	rjmp	.+170    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
			{	
				PORTC|=(1<<5);//buzzer on
 42a:	88 b1       	in	r24, 0x08	; 8
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	88 b9       	out	0x08, r24	; 8
				uint8_t   count1=(temp_1&0xf0)+(temp_2&0x0f);
 430:	9c 2d       	mov	r25, r12
 432:	90 7f       	andi	r25, 0xF0	; 240
 434:	8d 2d       	mov	r24, r13
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	89 2e       	mov	r8, r25
 43a:	88 0e       	add	r8, r24
				uint8_t   count2=(temp_3&0xf0)+(temp_4&0x0f);
 43c:	9e 2d       	mov	r25, r14
 43e:	90 7f       	andi	r25, 0xF0	; 240
 440:	8f 2d       	mov	r24, r15
 442:	8f 70       	andi	r24, 0x0F	; 15
 444:	89 0f       	add	r24, r25
				uint16_t  current_count= (count1<<8)+ count2;
 446:	91 2c       	mov	r9, r1
 448:	98 2c       	mov	r9, r8
 44a:	88 24       	eor	r8, r8
 44c:	88 0e       	add	r8, r24
 44e:	91 1c       	adc	r9, r1
				LCD_Clear();
 450:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Clear>
				LCD_String("C:");
 454:	8c e1       	ldi	r24, 0x1C	; 28
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
				HextoASCII(raddress);
 45c:	81 2f       	mov	r24, r17
 45e:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(temp_1);
 462:	8c 2d       	mov	r24, r12
 464:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(temp_2);
 468:	8d 2d       	mov	r24, r13
 46a:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(temp_3);
 46e:	8e 2d       	mov	r24, r14
 470:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(temp_4);
 474:	8f 2d       	mov	r24, r15
 476:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(data);
 47a:	8b 2d       	mov	r24, r11
 47c:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				HextoASCII(chk);
 480:	8a 2d       	mov	r24, r10
 482:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				LCD_goto_xy(1,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_goto_xy>
				LCD_String("KeyNo:");
 48e:	8f e1       	ldi	r24, 0x1F	; 31
 490:	93 e0       	ldi	r25, 0x03	; 3
 492:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
				HextoASCII(current_count);
 496:	88 2d       	mov	r24, r8
 498:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				LCD_String(" Cmd: ");
 49c:	86 e2       	ldi	r24, 0x26	; 38
 49e:	93 e0       	ldi	r25, 0x03	; 3
 4a0:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_String>
				HextoASCII(data);
 4a4:	8b 2d       	mov	r24, r11
 4a6:	0e 94 2b 01 	call	0x256	; 0x256 <HextoASCII>
				if     (data==CMD1)	  up();
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	b8 12       	cpse	r11, r24
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <up>
 4b4:	0b c0       	rjmp	.+22     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
				else if(data==CMD2)	stop();
 4b6:	82 e2       	ldi	r24, 0x22	; 34
 4b8:	b8 12       	cpse	r11, r24
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <stop>
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
				else if(data==CMD3)	down();
 4c2:	84 e2       	ldi	r24, 0x24	; 36
 4c4:	b8 12       	cpse	r11, r24
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <down>
				count = current_count;
 4cc:	90 92 2f 03 	sts	0x032F, r9	; 0x80032f <__data_end+0x1>
 4d0:	80 92 2e 03 	sts	0x032E, r8	; 0x80032e <__data_end>
				//eeprom_write_word((uint16_t*)KEY_ADDRESS,count);
			}
		}
	}
		PORTC&=~(1<<5);//buzzer of
 4d4:	88 b1       	in	r24, 0x08	; 8
 4d6:	8f 7d       	andi	r24, 0xDF	; 223
 4d8:	88 b9       	out	0x08, r24	; 8
	}
 4da:	71 cf       	rjmp	.-286    	; 0x3be <main+0x68>

000004dc <__vector_1>:
	return 0;
}

ISR(INT0_vect){
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
		if      (bit_is_set(PIND,BUT1))	up();
 4fe:	4d 9b       	sbis	0x09, 5	; 9
 500:	03 c0       	rjmp	.+6      	; 0x508 <__vector_1+0x2c>
 502:	0e 94 63 01 	call	0x2c6	; 0x2c6 <up>
 506:	0c c0       	rjmp	.+24     	; 0x520 <__vector_1+0x44>
		else if ((bit_is_set(PIND,BUT2))||(bit_is_set(PINC,ABOVE))||(bit_is_set(PINC,BELOW))) stop();
 508:	4e 99       	sbic	0x09, 6	; 9
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__vector_1+0x38>
 50c:	33 99       	sbic	0x06, 3	; 6
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__vector_1+0x38>
 510:	34 9b       	sbis	0x06, 4	; 6
 512:	03 c0       	rjmp	.+6      	; 0x51a <__vector_1+0x3e>
 514:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <stop>
 518:	03 c0       	rjmp	.+6      	; 0x520 <__vector_1+0x44>
		else if (bit_is_set(PIND,BUT3)) down();
 51a:	4f 99       	sbic	0x09, 7	; 9
 51c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <down>
		else;
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_2>:

ISR(INT1_vect){
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
	count = 150;
 550:	86 e9       	ldi	r24, 0x96	; 150
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <__data_end+0x1>
 558:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <__data_end>
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <sprintf>:
 56a:	ae e0       	ldi	r26, 0x0E	; 14
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	eb eb       	ldi	r30, 0xBB	; 187
 570:	f2 e0       	ldi	r31, 0x02	; 2
 572:	0c 94 76 05 	jmp	0xaec	; 0xaec <__prologue_saves__+0x1c>
 576:	0d 89       	ldd	r16, Y+21	; 0x15
 578:	1e 89       	ldd	r17, Y+22	; 0x16
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	8c 83       	std	Y+4, r24	; 0x04
 57e:	1a 83       	std	Y+2, r17	; 0x02
 580:	09 83       	std	Y+1, r16	; 0x01
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	9f e7       	ldi	r25, 0x7F	; 127
 586:	9e 83       	std	Y+6, r25	; 0x06
 588:	8d 83       	std	Y+5, r24	; 0x05
 58a:	ae 01       	movw	r20, r28
 58c:	47 5e       	subi	r20, 0xE7	; 231
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	6f 89       	ldd	r22, Y+23	; 0x17
 592:	78 8d       	ldd	r23, Y+24	; 0x18
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	0e 94 d7 02 	call	0x5ae	; 0x5ae <vfprintf>
 59c:	ef 81       	ldd	r30, Y+7	; 0x07
 59e:	f8 85       	ldd	r31, Y+8	; 0x08
 5a0:	e0 0f       	add	r30, r16
 5a2:	f1 1f       	adc	r31, r17
 5a4:	10 82       	st	Z, r1
 5a6:	2e 96       	adiw	r28, 0x0e	; 14
 5a8:	e4 e0       	ldi	r30, 0x04	; 4
 5aa:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__epilogue_restores__+0x1c>

000005ae <vfprintf>:
 5ae:	ab e0       	ldi	r26, 0x0B	; 11
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	ed ed       	ldi	r30, 0xDD	; 221
 5b4:	f2 e0       	ldi	r31, 0x02	; 2
 5b6:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__prologue_saves__>
 5ba:	6c 01       	movw	r12, r24
 5bc:	7b 01       	movw	r14, r22
 5be:	8a 01       	movw	r16, r20
 5c0:	fc 01       	movw	r30, r24
 5c2:	17 82       	std	Z+7, r1	; 0x07
 5c4:	16 82       	std	Z+6, r1	; 0x06
 5c6:	83 81       	ldd	r24, Z+3	; 0x03
 5c8:	81 ff       	sbrs	r24, 1
 5ca:	cc c1       	rjmp	.+920    	; 0x964 <__stack+0x65>
 5cc:	ce 01       	movw	r24, r28
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	3c 01       	movw	r6, r24
 5d2:	f6 01       	movw	r30, r12
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	f7 01       	movw	r30, r14
 5d8:	93 fd       	sbrc	r25, 3
 5da:	85 91       	lpm	r24, Z+
 5dc:	93 ff       	sbrs	r25, 3
 5de:	81 91       	ld	r24, Z+
 5e0:	7f 01       	movw	r14, r30
 5e2:	88 23       	and	r24, r24
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <vfprintf+0x3a>
 5e6:	ba c1       	rjmp	.+884    	; 0x95c <__stack+0x5d>
 5e8:	85 32       	cpi	r24, 0x25	; 37
 5ea:	39 f4       	brne	.+14     	; 0x5fa <vfprintf+0x4c>
 5ec:	93 fd       	sbrc	r25, 3
 5ee:	85 91       	lpm	r24, Z+
 5f0:	93 ff       	sbrs	r25, 3
 5f2:	81 91       	ld	r24, Z+
 5f4:	7f 01       	movw	r14, r30
 5f6:	85 32       	cpi	r24, 0x25	; 37
 5f8:	29 f4       	brne	.+10     	; 0x604 <vfprintf+0x56>
 5fa:	b6 01       	movw	r22, r12
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 602:	e7 cf       	rjmp	.-50     	; 0x5d2 <vfprintf+0x24>
 604:	91 2c       	mov	r9, r1
 606:	21 2c       	mov	r2, r1
 608:	31 2c       	mov	r3, r1
 60a:	ff e1       	ldi	r31, 0x1F	; 31
 60c:	f3 15       	cp	r31, r3
 60e:	d8 f0       	brcs	.+54     	; 0x646 <vfprintf+0x98>
 610:	8b 32       	cpi	r24, 0x2B	; 43
 612:	79 f0       	breq	.+30     	; 0x632 <vfprintf+0x84>
 614:	38 f4       	brcc	.+14     	; 0x624 <vfprintf+0x76>
 616:	80 32       	cpi	r24, 0x20	; 32
 618:	79 f0       	breq	.+30     	; 0x638 <vfprintf+0x8a>
 61a:	83 32       	cpi	r24, 0x23	; 35
 61c:	a1 f4       	brne	.+40     	; 0x646 <vfprintf+0x98>
 61e:	23 2d       	mov	r18, r3
 620:	20 61       	ori	r18, 0x10	; 16
 622:	1d c0       	rjmp	.+58     	; 0x65e <vfprintf+0xb0>
 624:	8d 32       	cpi	r24, 0x2D	; 45
 626:	61 f0       	breq	.+24     	; 0x640 <vfprintf+0x92>
 628:	80 33       	cpi	r24, 0x30	; 48
 62a:	69 f4       	brne	.+26     	; 0x646 <vfprintf+0x98>
 62c:	23 2d       	mov	r18, r3
 62e:	21 60       	ori	r18, 0x01	; 1
 630:	16 c0       	rjmp	.+44     	; 0x65e <vfprintf+0xb0>
 632:	83 2d       	mov	r24, r3
 634:	82 60       	ori	r24, 0x02	; 2
 636:	38 2e       	mov	r3, r24
 638:	e3 2d       	mov	r30, r3
 63a:	e4 60       	ori	r30, 0x04	; 4
 63c:	3e 2e       	mov	r3, r30
 63e:	2a c0       	rjmp	.+84     	; 0x694 <vfprintf+0xe6>
 640:	f3 2d       	mov	r31, r3
 642:	f8 60       	ori	r31, 0x08	; 8
 644:	1d c0       	rjmp	.+58     	; 0x680 <vfprintf+0xd2>
 646:	37 fc       	sbrc	r3, 7
 648:	2d c0       	rjmp	.+90     	; 0x6a4 <vfprintf+0xf6>
 64a:	20 ed       	ldi	r18, 0xD0	; 208
 64c:	28 0f       	add	r18, r24
 64e:	2a 30       	cpi	r18, 0x0A	; 10
 650:	40 f0       	brcs	.+16     	; 0x662 <vfprintf+0xb4>
 652:	8e 32       	cpi	r24, 0x2E	; 46
 654:	b9 f4       	brne	.+46     	; 0x684 <vfprintf+0xd6>
 656:	36 fc       	sbrc	r3, 6
 658:	81 c1       	rjmp	.+770    	; 0x95c <__stack+0x5d>
 65a:	23 2d       	mov	r18, r3
 65c:	20 64       	ori	r18, 0x40	; 64
 65e:	32 2e       	mov	r3, r18
 660:	19 c0       	rjmp	.+50     	; 0x694 <vfprintf+0xe6>
 662:	36 fe       	sbrs	r3, 6
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0xc4>
 666:	8a e0       	ldi	r24, 0x0A	; 10
 668:	98 9e       	mul	r9, r24
 66a:	20 0d       	add	r18, r0
 66c:	11 24       	eor	r1, r1
 66e:	92 2e       	mov	r9, r18
 670:	11 c0       	rjmp	.+34     	; 0x694 <vfprintf+0xe6>
 672:	ea e0       	ldi	r30, 0x0A	; 10
 674:	2e 9e       	mul	r2, r30
 676:	20 0d       	add	r18, r0
 678:	11 24       	eor	r1, r1
 67a:	22 2e       	mov	r2, r18
 67c:	f3 2d       	mov	r31, r3
 67e:	f0 62       	ori	r31, 0x20	; 32
 680:	3f 2e       	mov	r3, r31
 682:	08 c0       	rjmp	.+16     	; 0x694 <vfprintf+0xe6>
 684:	8c 36       	cpi	r24, 0x6C	; 108
 686:	21 f4       	brne	.+8      	; 0x690 <vfprintf+0xe2>
 688:	83 2d       	mov	r24, r3
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	38 2e       	mov	r3, r24
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0xe6>
 690:	88 36       	cpi	r24, 0x68	; 104
 692:	41 f4       	brne	.+16     	; 0x6a4 <vfprintf+0xf6>
 694:	f7 01       	movw	r30, r14
 696:	93 fd       	sbrc	r25, 3
 698:	85 91       	lpm	r24, Z+
 69a:	93 ff       	sbrs	r25, 3
 69c:	81 91       	ld	r24, Z+
 69e:	7f 01       	movw	r14, r30
 6a0:	81 11       	cpse	r24, r1
 6a2:	b3 cf       	rjmp	.-154    	; 0x60a <vfprintf+0x5c>
 6a4:	98 2f       	mov	r25, r24
 6a6:	9f 7d       	andi	r25, 0xDF	; 223
 6a8:	95 54       	subi	r25, 0x45	; 69
 6aa:	93 30       	cpi	r25, 0x03	; 3
 6ac:	28 f4       	brcc	.+10     	; 0x6b8 <vfprintf+0x10a>
 6ae:	0c 5f       	subi	r16, 0xFC	; 252
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	9f e3       	ldi	r25, 0x3F	; 63
 6b4:	99 83       	std	Y+1, r25	; 0x01
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <vfprintf+0x124>
 6b8:	83 36       	cpi	r24, 0x63	; 99
 6ba:	31 f0       	breq	.+12     	; 0x6c8 <vfprintf+0x11a>
 6bc:	83 37       	cpi	r24, 0x73	; 115
 6be:	71 f0       	breq	.+28     	; 0x6dc <vfprintf+0x12e>
 6c0:	83 35       	cpi	r24, 0x53	; 83
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <vfprintf+0x118>
 6c4:	59 c0       	rjmp	.+178    	; 0x778 <vfprintf+0x1ca>
 6c6:	21 c0       	rjmp	.+66     	; 0x70a <vfprintf+0x15c>
 6c8:	f8 01       	movw	r30, r16
 6ca:	80 81       	ld	r24, Z
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	0e 5f       	subi	r16, 0xFE	; 254
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	88 24       	eor	r8, r8
 6d4:	83 94       	inc	r8
 6d6:	91 2c       	mov	r9, r1
 6d8:	53 01       	movw	r10, r6
 6da:	13 c0       	rjmp	.+38     	; 0x702 <vfprintf+0x154>
 6dc:	28 01       	movw	r4, r16
 6de:	f2 e0       	ldi	r31, 0x02	; 2
 6e0:	4f 0e       	add	r4, r31
 6e2:	51 1c       	adc	r5, r1
 6e4:	f8 01       	movw	r30, r16
 6e6:	a0 80       	ld	r10, Z
 6e8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ea:	36 fe       	sbrs	r3, 6
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <vfprintf+0x146>
 6ee:	69 2d       	mov	r22, r9
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x14a>
 6f4:	6f ef       	ldi	r22, 0xFF	; 255
 6f6:	7f ef       	ldi	r23, 0xFF	; 255
 6f8:	c5 01       	movw	r24, r10
 6fa:	0e 94 c3 04 	call	0x986	; 0x986 <strnlen>
 6fe:	4c 01       	movw	r8, r24
 700:	82 01       	movw	r16, r4
 702:	f3 2d       	mov	r31, r3
 704:	ff 77       	andi	r31, 0x7F	; 127
 706:	3f 2e       	mov	r3, r31
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0x188>
 70a:	28 01       	movw	r4, r16
 70c:	22 e0       	ldi	r18, 0x02	; 2
 70e:	42 0e       	add	r4, r18
 710:	51 1c       	adc	r5, r1
 712:	f8 01       	movw	r30, r16
 714:	a0 80       	ld	r10, Z
 716:	b1 80       	ldd	r11, Z+1	; 0x01
 718:	36 fe       	sbrs	r3, 6
 71a:	03 c0       	rjmp	.+6      	; 0x722 <vfprintf+0x174>
 71c:	69 2d       	mov	r22, r9
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <vfprintf+0x178>
 722:	6f ef       	ldi	r22, 0xFF	; 255
 724:	7f ef       	ldi	r23, 0xFF	; 255
 726:	c5 01       	movw	r24, r10
 728:	0e 94 b8 04 	call	0x970	; 0x970 <strnlen_P>
 72c:	4c 01       	movw	r8, r24
 72e:	f3 2d       	mov	r31, r3
 730:	f0 68       	ori	r31, 0x80	; 128
 732:	3f 2e       	mov	r3, r31
 734:	82 01       	movw	r16, r4
 736:	33 fc       	sbrc	r3, 3
 738:	1b c0       	rjmp	.+54     	; 0x770 <vfprintf+0x1c2>
 73a:	82 2d       	mov	r24, r2
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	88 16       	cp	r8, r24
 740:	99 06       	cpc	r9, r25
 742:	b0 f4       	brcc	.+44     	; 0x770 <vfprintf+0x1c2>
 744:	b6 01       	movw	r22, r12
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 74e:	2a 94       	dec	r2
 750:	f4 cf       	rjmp	.-24     	; 0x73a <vfprintf+0x18c>
 752:	f5 01       	movw	r30, r10
 754:	37 fc       	sbrc	r3, 7
 756:	85 91       	lpm	r24, Z+
 758:	37 fe       	sbrs	r3, 7
 75a:	81 91       	ld	r24, Z+
 75c:	5f 01       	movw	r10, r30
 75e:	b6 01       	movw	r22, r12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 766:	21 10       	cpse	r2, r1
 768:	2a 94       	dec	r2
 76a:	21 e0       	ldi	r18, 0x01	; 1
 76c:	82 1a       	sub	r8, r18
 76e:	91 08       	sbc	r9, r1
 770:	81 14       	cp	r8, r1
 772:	91 04       	cpc	r9, r1
 774:	71 f7       	brne	.-36     	; 0x752 <vfprintf+0x1a4>
 776:	e8 c0       	rjmp	.+464    	; 0x948 <__stack+0x49>
 778:	84 36       	cpi	r24, 0x64	; 100
 77a:	11 f0       	breq	.+4      	; 0x780 <vfprintf+0x1d2>
 77c:	89 36       	cpi	r24, 0x69	; 105
 77e:	41 f5       	brne	.+80     	; 0x7d0 <vfprintf+0x222>
 780:	f8 01       	movw	r30, r16
 782:	37 fe       	sbrs	r3, 7
 784:	07 c0       	rjmp	.+14     	; 0x794 <vfprintf+0x1e6>
 786:	60 81       	ld	r22, Z
 788:	71 81       	ldd	r23, Z+1	; 0x01
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	0c 5f       	subi	r16, 0xFC	; 252
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <vfprintf+0x1f6>
 794:	60 81       	ld	r22, Z
 796:	71 81       	ldd	r23, Z+1	; 0x01
 798:	07 2e       	mov	r0, r23
 79a:	00 0c       	add	r0, r0
 79c:	88 0b       	sbc	r24, r24
 79e:	99 0b       	sbc	r25, r25
 7a0:	0e 5f       	subi	r16, 0xFE	; 254
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	f3 2d       	mov	r31, r3
 7a6:	ff 76       	andi	r31, 0x6F	; 111
 7a8:	3f 2e       	mov	r3, r31
 7aa:	97 ff       	sbrs	r25, 7
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x212>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	f0 68       	ori	r31, 0x80	; 128
 7be:	3f 2e       	mov	r3, r31
 7c0:	2a e0       	ldi	r18, 0x0A	; 10
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	a3 01       	movw	r20, r6
 7c6:	0e 94 0a 05 	call	0xa14	; 0xa14 <__ultoa_invert>
 7ca:	88 2e       	mov	r8, r24
 7cc:	86 18       	sub	r8, r6
 7ce:	45 c0       	rjmp	.+138    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 7d0:	85 37       	cpi	r24, 0x75	; 117
 7d2:	31 f4       	brne	.+12     	; 0x7e0 <vfprintf+0x232>
 7d4:	23 2d       	mov	r18, r3
 7d6:	2f 7e       	andi	r18, 0xEF	; 239
 7d8:	b2 2e       	mov	r11, r18
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	25 c0       	rjmp	.+74     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7e0:	93 2d       	mov	r25, r3
 7e2:	99 7f       	andi	r25, 0xF9	; 249
 7e4:	b9 2e       	mov	r11, r25
 7e6:	8f 36       	cpi	r24, 0x6F	; 111
 7e8:	c1 f0       	breq	.+48     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <vfprintf+0x244>
 7ec:	88 35       	cpi	r24, 0x58	; 88
 7ee:	79 f0       	breq	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f0:	b5 c0       	rjmp	.+362    	; 0x95c <__stack+0x5d>
 7f2:	80 37       	cpi	r24, 0x70	; 112
 7f4:	19 f0       	breq	.+6      	; 0x7fc <vfprintf+0x24e>
 7f6:	88 37       	cpi	r24, 0x78	; 120
 7f8:	21 f0       	breq	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	b0 c0       	rjmp	.+352    	; 0x95c <__stack+0x5d>
 7fc:	e9 2f       	mov	r30, r25
 7fe:	e0 61       	ori	r30, 0x10	; 16
 800:	be 2e       	mov	r11, r30
 802:	b4 fe       	sbrs	r11, 4
 804:	0d c0       	rjmp	.+26     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 806:	fb 2d       	mov	r31, r11
 808:	f4 60       	ori	r31, 0x04	; 4
 80a:	bf 2e       	mov	r11, r31
 80c:	09 c0       	rjmp	.+18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 80e:	34 fe       	sbrs	r3, 4
 810:	0a c0       	rjmp	.+20     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 812:	29 2f       	mov	r18, r25
 814:	26 60       	ori	r18, 0x06	; 6
 816:	b2 2e       	mov	r11, r18
 818:	06 c0       	rjmp	.+12     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81a:	28 e0       	ldi	r18, 0x08	; 8
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	05 c0       	rjmp	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 820:	20 e1       	ldi	r18, 0x10	; 16
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	20 e1       	ldi	r18, 0x10	; 16
 828:	32 e0       	ldi	r19, 0x02	; 2
 82a:	f8 01       	movw	r30, r16
 82c:	b7 fe       	sbrs	r11, 7
 82e:	07 c0       	rjmp	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	93 81       	ldd	r25, Z+3	; 0x03
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	06 c0       	rjmp	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83e:	60 81       	ld	r22, Z
 840:	71 81       	ldd	r23, Z+1	; 0x01
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	a3 01       	movw	r20, r6
 84c:	0e 94 0a 05 	call	0xa14	; 0xa14 <__ultoa_invert>
 850:	88 2e       	mov	r8, r24
 852:	86 18       	sub	r8, r6
 854:	fb 2d       	mov	r31, r11
 856:	ff 77       	andi	r31, 0x7F	; 127
 858:	3f 2e       	mov	r3, r31
 85a:	36 fe       	sbrs	r3, 6
 85c:	0d c0       	rjmp	.+26     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 85e:	23 2d       	mov	r18, r3
 860:	2e 7f       	andi	r18, 0xFE	; 254
 862:	a2 2e       	mov	r10, r18
 864:	89 14       	cp	r8, r9
 866:	58 f4       	brcc	.+22     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 868:	34 fe       	sbrs	r3, 4
 86a:	0b c0       	rjmp	.+22     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 86c:	32 fc       	sbrc	r3, 2
 86e:	09 c0       	rjmp	.+18     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 870:	83 2d       	mov	r24, r3
 872:	8e 7e       	andi	r24, 0xEE	; 238
 874:	a8 2e       	mov	r10, r24
 876:	05 c0       	rjmp	.+10     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 878:	b8 2c       	mov	r11, r8
 87a:	a3 2c       	mov	r10, r3
 87c:	03 c0       	rjmp	.+6      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87e:	b8 2c       	mov	r11, r8
 880:	01 c0       	rjmp	.+2      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 882:	b9 2c       	mov	r11, r9
 884:	a4 fe       	sbrs	r10, 4
 886:	0f c0       	rjmp	.+30     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 888:	fe 01       	movw	r30, r28
 88a:	e8 0d       	add	r30, r8
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	80 33       	cpi	r24, 0x30	; 48
 892:	21 f4       	brne	.+8      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 894:	9a 2d       	mov	r25, r10
 896:	99 7e       	andi	r25, 0xE9	; 233
 898:	a9 2e       	mov	r10, r25
 89a:	09 c0       	rjmp	.+18     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 89c:	a2 fe       	sbrs	r10, 2
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a0:	b3 94       	inc	r11
 8a2:	b3 94       	inc	r11
 8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8a6:	8a 2d       	mov	r24, r10
 8a8:	86 78       	andi	r24, 0x86	; 134
 8aa:	09 f0       	breq	.+2      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8ac:	b3 94       	inc	r11
 8ae:	a3 fc       	sbrc	r10, 3
 8b0:	11 c0       	rjmp	.+34     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8b2:	a0 fe       	sbrs	r10, 0
 8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8b6:	b2 14       	cp	r11, r2
 8b8:	88 f4       	brcc	.+34     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ba:	28 0c       	add	r2, r8
 8bc:	92 2c       	mov	r9, r2
 8be:	9b 18       	sub	r9, r11
 8c0:	0e c0       	rjmp	.+28     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8c2:	b2 14       	cp	r11, r2
 8c4:	60 f4       	brcc	.+24     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8c6:	b6 01       	movw	r22, r12
 8c8:	80 e2       	ldi	r24, 0x20	; 32
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 8d0:	b3 94       	inc	r11
 8d2:	f7 cf       	rjmp	.-18     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8d4:	b2 14       	cp	r11, r2
 8d6:	18 f4       	brcc	.+6      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d8:	2b 18       	sub	r2, r11
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8dc:	98 2c       	mov	r9, r8
 8de:	21 2c       	mov	r2, r1
 8e0:	a4 fe       	sbrs	r10, 4
 8e2:	10 c0       	rjmp	.+32     	; 0x904 <__stack+0x5>
 8e4:	b6 01       	movw	r22, r12
 8e6:	80 e3       	ldi	r24, 0x30	; 48
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 8ee:	a2 fe       	sbrs	r10, 2
 8f0:	17 c0       	rjmp	.+46     	; 0x920 <__stack+0x21>
 8f2:	a1 fc       	sbrc	r10, 1
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f6:	88 e7       	ldi	r24, 0x78	; 120
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
 8fc:	88 e5       	ldi	r24, 0x58	; 88
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	b6 01       	movw	r22, r12
 902:	0c c0       	rjmp	.+24     	; 0x91c <__stack+0x1d>
 904:	8a 2d       	mov	r24, r10
 906:	86 78       	andi	r24, 0x86	; 134
 908:	59 f0       	breq	.+22     	; 0x920 <__stack+0x21>
 90a:	a1 fe       	sbrs	r10, 1
 90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
 90e:	8b e2       	ldi	r24, 0x2B	; 43
 910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	a7 fc       	sbrc	r10, 7
 916:	8d e2       	ldi	r24, 0x2D	; 45
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 920:	89 14       	cp	r8, r9
 922:	38 f4       	brcc	.+14     	; 0x932 <__stack+0x33>
 924:	b6 01       	movw	r22, r12
 926:	80 e3       	ldi	r24, 0x30	; 48
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 92e:	9a 94       	dec	r9
 930:	f7 cf       	rjmp	.-18     	; 0x920 <__stack+0x21>
 932:	8a 94       	dec	r8
 934:	f3 01       	movw	r30, r6
 936:	e8 0d       	add	r30, r8
 938:	f1 1d       	adc	r31, r1
 93a:	80 81       	ld	r24, Z
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 944:	81 10       	cpse	r8, r1
 946:	f5 cf       	rjmp	.-22     	; 0x932 <__stack+0x33>
 948:	22 20       	and	r2, r2
 94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0x4f>
 94c:	42 ce       	rjmp	.-892    	; 0x5d2 <vfprintf+0x24>
 94e:	b6 01       	movw	r22, r12
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 ce 04 	call	0x99c	; 0x99c <fputc>
 958:	2a 94       	dec	r2
 95a:	f6 cf       	rjmp	.-20     	; 0x948 <__stack+0x49>
 95c:	f6 01       	movw	r30, r12
 95e:	86 81       	ldd	r24, Z+6	; 0x06
 960:	97 81       	ldd	r25, Z+7	; 0x07
 962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
 964:	8f ef       	ldi	r24, 0xFF	; 255
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	2b 96       	adiw	r28, 0x0b	; 11
 96a:	e2 e1       	ldi	r30, 0x12	; 18
 96c:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__epilogue_restores__>

00000970 <strnlen_P>:
 970:	fc 01       	movw	r30, r24
 972:	05 90       	lpm	r0, Z+
 974:	61 50       	subi	r22, 0x01	; 1
 976:	70 40       	sbci	r23, 0x00	; 0
 978:	01 10       	cpse	r0, r1
 97a:	d8 f7       	brcc	.-10     	; 0x972 <strnlen_P+0x2>
 97c:	80 95       	com	r24
 97e:	90 95       	com	r25
 980:	8e 0f       	add	r24, r30
 982:	9f 1f       	adc	r25, r31
 984:	08 95       	ret

00000986 <strnlen>:
 986:	fc 01       	movw	r30, r24
 988:	61 50       	subi	r22, 0x01	; 1
 98a:	70 40       	sbci	r23, 0x00	; 0
 98c:	01 90       	ld	r0, Z+
 98e:	01 10       	cpse	r0, r1
 990:	d8 f7       	brcc	.-10     	; 0x988 <strnlen+0x2>
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	8e 0f       	add	r24, r30
 998:	9f 1f       	adc	r25, r31
 99a:	08 95       	ret

0000099c <fputc>:
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	fb 01       	movw	r30, r22
 9a6:	23 81       	ldd	r18, Z+3	; 0x03
 9a8:	21 fd       	sbrc	r18, 1
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <fputc+0x16>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	2c c0       	rjmp	.+88     	; 0xa0a <fputc+0x6e>
 9b2:	22 ff       	sbrs	r18, 2
 9b4:	16 c0       	rjmp	.+44     	; 0x9e2 <fputc+0x46>
 9b6:	46 81       	ldd	r20, Z+6	; 0x06
 9b8:	57 81       	ldd	r21, Z+7	; 0x07
 9ba:	24 81       	ldd	r18, Z+4	; 0x04
 9bc:	35 81       	ldd	r19, Z+5	; 0x05
 9be:	42 17       	cp	r20, r18
 9c0:	53 07       	cpc	r21, r19
 9c2:	44 f4       	brge	.+16     	; 0x9d4 <fputc+0x38>
 9c4:	a0 81       	ld	r26, Z
 9c6:	b1 81       	ldd	r27, Z+1	; 0x01
 9c8:	9d 01       	movw	r18, r26
 9ca:	2f 5f       	subi	r18, 0xFF	; 255
 9cc:	3f 4f       	sbci	r19, 0xFF	; 255
 9ce:	31 83       	std	Z+1, r19	; 0x01
 9d0:	20 83       	st	Z, r18
 9d2:	8c 93       	st	X, r24
 9d4:	26 81       	ldd	r18, Z+6	; 0x06
 9d6:	37 81       	ldd	r19, Z+7	; 0x07
 9d8:	2f 5f       	subi	r18, 0xFF	; 255
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	37 83       	std	Z+7, r19	; 0x07
 9de:	26 83       	std	Z+6, r18	; 0x06
 9e0:	14 c0       	rjmp	.+40     	; 0xa0a <fputc+0x6e>
 9e2:	8b 01       	movw	r16, r22
 9e4:	ec 01       	movw	r28, r24
 9e6:	fb 01       	movw	r30, r22
 9e8:	00 84       	ldd	r0, Z+8	; 0x08
 9ea:	f1 85       	ldd	r31, Z+9	; 0x09
 9ec:	e0 2d       	mov	r30, r0
 9ee:	09 95       	icall
 9f0:	89 2b       	or	r24, r25
 9f2:	e1 f6       	brne	.-72     	; 0x9ac <fputc+0x10>
 9f4:	d8 01       	movw	r26, r16
 9f6:	16 96       	adiw	r26, 0x06	; 6
 9f8:	8d 91       	ld	r24, X+
 9fa:	9c 91       	ld	r25, X
 9fc:	17 97       	sbiw	r26, 0x07	; 7
 9fe:	01 96       	adiw	r24, 0x01	; 1
 a00:	17 96       	adiw	r26, 0x07	; 7
 a02:	9c 93       	st	X, r25
 a04:	8e 93       	st	-X, r24
 a06:	16 97       	sbiw	r26, 0x06	; 6
 a08:	ce 01       	movw	r24, r28
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	08 95       	ret

00000a14 <__ultoa_invert>:
 a14:	fa 01       	movw	r30, r20
 a16:	aa 27       	eor	r26, r26
 a18:	28 30       	cpi	r18, 0x08	; 8
 a1a:	51 f1       	breq	.+84     	; 0xa70 <__ultoa_invert+0x5c>
 a1c:	20 31       	cpi	r18, 0x10	; 16
 a1e:	81 f1       	breq	.+96     	; 0xa80 <__ultoa_invert+0x6c>
 a20:	e8 94       	clt
 a22:	6f 93       	push	r22
 a24:	6e 7f       	andi	r22, 0xFE	; 254
 a26:	6e 5f       	subi	r22, 0xFE	; 254
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	af 4f       	sbci	r26, 0xFF	; 255
 a30:	b1 e0       	ldi	r27, 0x01	; 1
 a32:	3e d0       	rcall	.+124    	; 0xab0 <__ultoa_invert+0x9c>
 a34:	b4 e0       	ldi	r27, 0x04	; 4
 a36:	3c d0       	rcall	.+120    	; 0xab0 <__ultoa_invert+0x9c>
 a38:	67 0f       	add	r22, r23
 a3a:	78 1f       	adc	r23, r24
 a3c:	89 1f       	adc	r24, r25
 a3e:	9a 1f       	adc	r25, r26
 a40:	a1 1d       	adc	r26, r1
 a42:	68 0f       	add	r22, r24
 a44:	79 1f       	adc	r23, r25
 a46:	8a 1f       	adc	r24, r26
 a48:	91 1d       	adc	r25, r1
 a4a:	a1 1d       	adc	r26, r1
 a4c:	6a 0f       	add	r22, r26
 a4e:	71 1d       	adc	r23, r1
 a50:	81 1d       	adc	r24, r1
 a52:	91 1d       	adc	r25, r1
 a54:	a1 1d       	adc	r26, r1
 a56:	20 d0       	rcall	.+64     	; 0xa98 <__ultoa_invert+0x84>
 a58:	09 f4       	brne	.+2      	; 0xa5c <__ultoa_invert+0x48>
 a5a:	68 94       	set
 a5c:	3f 91       	pop	r19
 a5e:	2a e0       	ldi	r18, 0x0A	; 10
 a60:	26 9f       	mul	r18, r22
 a62:	11 24       	eor	r1, r1
 a64:	30 19       	sub	r19, r0
 a66:	30 5d       	subi	r19, 0xD0	; 208
 a68:	31 93       	st	Z+, r19
 a6a:	de f6       	brtc	.-74     	; 0xa22 <__ultoa_invert+0xe>
 a6c:	cf 01       	movw	r24, r30
 a6e:	08 95       	ret
 a70:	46 2f       	mov	r20, r22
 a72:	47 70       	andi	r20, 0x07	; 7
 a74:	40 5d       	subi	r20, 0xD0	; 208
 a76:	41 93       	st	Z+, r20
 a78:	b3 e0       	ldi	r27, 0x03	; 3
 a7a:	0f d0       	rcall	.+30     	; 0xa9a <__ultoa_invert+0x86>
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__ultoa_invert+0x5c>
 a7e:	f6 cf       	rjmp	.-20     	; 0xa6c <__ultoa_invert+0x58>
 a80:	46 2f       	mov	r20, r22
 a82:	4f 70       	andi	r20, 0x0F	; 15
 a84:	40 5d       	subi	r20, 0xD0	; 208
 a86:	4a 33       	cpi	r20, 0x3A	; 58
 a88:	18 f0       	brcs	.+6      	; 0xa90 <__ultoa_invert+0x7c>
 a8a:	49 5d       	subi	r20, 0xD9	; 217
 a8c:	31 fd       	sbrc	r19, 1
 a8e:	40 52       	subi	r20, 0x20	; 32
 a90:	41 93       	st	Z+, r20
 a92:	02 d0       	rcall	.+4      	; 0xa98 <__ultoa_invert+0x84>
 a94:	a9 f7       	brne	.-22     	; 0xa80 <__ultoa_invert+0x6c>
 a96:	ea cf       	rjmp	.-44     	; 0xa6c <__ultoa_invert+0x58>
 a98:	b4 e0       	ldi	r27, 0x04	; 4
 a9a:	a6 95       	lsr	r26
 a9c:	97 95       	ror	r25
 a9e:	87 95       	ror	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	ba 95       	dec	r27
 aa6:	c9 f7       	brne	.-14     	; 0xa9a <__ultoa_invert+0x86>
 aa8:	00 97       	sbiw	r24, 0x00	; 0
 aaa:	61 05       	cpc	r22, r1
 aac:	71 05       	cpc	r23, r1
 aae:	08 95       	ret
 ab0:	9b 01       	movw	r18, r22
 ab2:	ac 01       	movw	r20, r24
 ab4:	0a 2e       	mov	r0, r26
 ab6:	06 94       	lsr	r0
 ab8:	57 95       	ror	r21
 aba:	47 95       	ror	r20
 abc:	37 95       	ror	r19
 abe:	27 95       	ror	r18
 ac0:	ba 95       	dec	r27
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <__ultoa_invert+0xa2>
 ac4:	62 0f       	add	r22, r18
 ac6:	73 1f       	adc	r23, r19
 ac8:	84 1f       	adc	r24, r20
 aca:	95 1f       	adc	r25, r21
 acc:	a0 1d       	adc	r26, r0
 ace:	08 95       	ret

00000ad0 <__prologue_saves__>:
 ad0:	2f 92       	push	r2
 ad2:	3f 92       	push	r3
 ad4:	4f 92       	push	r4
 ad6:	5f 92       	push	r5
 ad8:	6f 92       	push	r6
 ada:	7f 92       	push	r7
 adc:	8f 92       	push	r8
 ade:	9f 92       	push	r9
 ae0:	af 92       	push	r10
 ae2:	bf 92       	push	r11
 ae4:	cf 92       	push	r12
 ae6:	df 92       	push	r13
 ae8:	ef 92       	push	r14
 aea:	ff 92       	push	r15
 aec:	0f 93       	push	r16
 aee:	1f 93       	push	r17
 af0:	cf 93       	push	r28
 af2:	df 93       	push	r29
 af4:	cd b7       	in	r28, 0x3d	; 61
 af6:	de b7       	in	r29, 0x3e	; 62
 af8:	ca 1b       	sub	r28, r26
 afa:	db 0b       	sbc	r29, r27
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	09 94       	ijmp

00000b08 <__epilogue_restores__>:
 b08:	2a 88       	ldd	r2, Y+18	; 0x12
 b0a:	39 88       	ldd	r3, Y+17	; 0x11
 b0c:	48 88       	ldd	r4, Y+16	; 0x10
 b0e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b10:	6e 84       	ldd	r6, Y+14	; 0x0e
 b12:	7d 84       	ldd	r7, Y+13	; 0x0d
 b14:	8c 84       	ldd	r8, Y+12	; 0x0c
 b16:	9b 84       	ldd	r9, Y+11	; 0x0b
 b18:	aa 84       	ldd	r10, Y+10	; 0x0a
 b1a:	b9 84       	ldd	r11, Y+9	; 0x09
 b1c:	c8 84       	ldd	r12, Y+8	; 0x08
 b1e:	df 80       	ldd	r13, Y+7	; 0x07
 b20:	ee 80       	ldd	r14, Y+6	; 0x06
 b22:	fd 80       	ldd	r15, Y+5	; 0x05
 b24:	0c 81       	ldd	r16, Y+4	; 0x04
 b26:	1b 81       	ldd	r17, Y+3	; 0x03
 b28:	aa 81       	ldd	r26, Y+2	; 0x02
 b2a:	b9 81       	ldd	r27, Y+1	; 0x01
 b2c:	ce 0f       	add	r28, r30
 b2e:	d1 1d       	adc	r29, r1
 b30:	0f b6       	in	r0, 0x3f	; 63
 b32:	f8 94       	cli
 b34:	de bf       	out	0x3e, r29	; 62
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	cd bf       	out	0x3d, r28	; 61
 b3a:	ed 01       	movw	r28, r26
 b3c:	08 95       	ret

00000b3e <_exit>:
 b3e:	f8 94       	cli

00000b40 <__stop_program>:
 b40:	ff cf       	rjmp	.-2      	; 0xb40 <__stop_program>
